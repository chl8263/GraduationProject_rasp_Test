import paho.mqtt.client as mqtt

import thread, time

from bluetooth import *

# LAT = ["37.6730666","37.6758649","37.678411","37.6807126","37.6825306","37.6803496","37.6781236","37.6753452","37.6719681","37.6683871","37.6650702","37.661474","37.6585662","37.6554329","37.6524606","37.6494094","37.6469659","37.6439933","37.6409084","37.6375817","37.6344448","37.6311307","37.6277791","37.6251593","37.6226934","37.6203236","37.6175375","37.614469","37.6111909","37.6077859","37.604655","37.6014872","37.5988996","37.5963624","37.5938429","37.5912987","37.5885988","37.5852057","37.5820712","37.5787559","37.575642","37.5724769","37.5695378","37.5663064","37.5627162","37.5595936","37.557349","37.5550652","37.5523764","37.5493325","37.5465617","37.5436771","37.5401475","37.5369207","37.5338605","37.5315026","37.5287486","37.5260221","37.5230186","37.5201555","37.5184405","37.5169978","37.5152945","37.5141351","37.514399","37.5145912","37.5134748","37.5118424","37.5101337","37.5085121","37.5073926","37.5080349","37.5086812","37.5079966","37.5069943","37.5061053","37.5038958","37.5008121","37.4976971","37.4943887","37.4916876","37.4891701","37.4868116","37.4850135","37.4847143","37.4847141","37.4847141","37.4847141","37.485531","37.4879373","37.4901636","37.4924367","37.4946254","37.4968047","37.4990243","37.5012451","37.5033515","37.5049285","37.5035267","37.501319","37.498925","37.4970625", "37.4969304","37.4969303","37.4981106","37.4997319","37.5008601","37.4993314","37.4969399","37.494717","37.4923726" ]

# LANG = ["37.6730666","127.0423952","127.0420662","127.0449513","127.0481232","127.0511326","127.0539453","127.0562647","127.0554331","127.0556498", "127.0557078","127.0557078","127.0557078","127.056167","127.0580382","127.0600018","127.0614437","127.0629679","127.0642544","127.0652892","127.0655148","127.0655151","127.065907","127.0680856","127.0708753","127.0735692","127.0756466","127.0748774","127.0752794","127.0757311","127.0761465","127.0770793","127.079344","127.0817626","127.0846226","127.0872984","127.0888755","127.0885859","127.0882013","127.0881426","127.0875518","127.0859546","127.0844564","127.083986","127.0839855","127.0827733","127.0799616","127.0771554","127.0748615","127.0728679","127.0709957","127.0689241","127.0682223","127.0677154","127.0663581","127.063425","127.0616265","127.0596854","127.0576234","127.0555004","127.0536552","127.051838","127.0492192","127.0455918","127.0416293","127.0394179","127.0359256","127.0322837","127.0286986","127.0252964","127.0217908","127.0175642","127.0134696","127.0102318","127.0060997","127.0027357","126.9998417","126.9981551","126.997658","126.9977539","126.9958141","126.9929627","126.9902864","126.9884123","126.98455","126.9802245","126.9762649","126.9720785","126.9684115","126.9653461","126.9625402","126.9596754","126.9566485","126.953598","126.9504908","126.9473819","126.9444331","126.9412572","126.9378454","126.9350534","126.9319608","126.9288054", "126.9248676","126.9207186","126.9167897","126.9133868","126.9096778","126.9062571","126.9032368","126.900435","126.8974801"]


LAT = ["37.5975825", "37.5997698", "37.6021878", "37.6045353", "37.6069172", "37.6084644", "37.6089769", "37.6091643",
       "37.6088651", "37.6087458", "37.6086609", "37.6067915", "37.6050523", "37.604437", "37.6032985", "37.6007025",
       "37.6024567", "37.6047443", "37.6064049", "37.6047846", "37.6024983", "37.6002766", "37.5979853", "37.5957639",
       "37.5934714", "37.5904931", "37.5874684", "37.5841209", "37.5810704", "37.5781783", "37.5758494", "37.576749",
       "37.5777512", "37.5773009", "37.5753081", "37.573529", "37.5730966", "37.5727495", "37.5724207", "37.5722046",
       "37.5722036", "37.5737943", "37.576141", "37.578563", "37.5807917", "37.5831348", "37.5855576", "37.5879047",
       "37.5903266", "37.5926733", "37.5950979", "37.5972221", "37.5995836", "37.6019489"]

LANG = ["126.961193", "126.9639816", "126.9670336", "126.9699967", "126.9730994", "126.976744", "126.9810103",
        "126.9849743", "126.9891409", "126.993445", "126.9975882", "127.0011906", "127.004668", "127.0085601",
        "127.0126042", "127.0202957", "127.0237766", "127.0269916", "127.0303772", "127.0336846", "127.0368923",
        "127.0400067", "127.0432185", "127.0463323", "127.0495456", "127.0497343", "127.0485696", "127.047998",
        "127.0495405", "127.049437", "127.0464659", "127.0425233", "127.03878", "127.0347507", "127.0312429",
        "127.0277307", "127.0234562", "127.01929", "127.0153428", "127.011034", "127.0068474", "127.0032827",
        "127.0003192", "126.9972631", "126.9944508", "126.9914941", "126.9884369", "126.985475", "126.9824186",
        "126.979457", "126.976397", "126.9737168", "126.9707404", "126.967752"]

broker = "192.168.0.9"

port = 1883

gu = "gugu"

dong = "dong"


def on_message(client, userdata, msg):
    global gu

    global dong

    print("message -> " + str(msg.payload))

    messge = str(msg.payload)

    real = messge.split(',')

    print(real[0])

    if real[0] == "loc":

        client1.unsubscribe(gu)

        client1.unsubscribe(dong)

        gu = real[1]

        dong = real[2]

        client1.subscribe(real[1], 0)

        client1.subscribe(real[2], 0)

        print("gu -> ", gu)

        print("dong -> ", dong)

    else:

        print("else msg -> ", messge)

        sendBlueTooth(messge)


def sendBlueTooth(message):
    try:

        server_sock = BluetoothSocket(RFCOMM)

        server_sock.bind(("", PORT_ANY))

        server_sock.listen(1)

        port = server_sock.getsockname()[1]

        uuid = "94f39d29-7d6d-437d-973b-fba39e49d4ee"

        advertise_service(server_sock, "SampleServer",

                          service_id=uuid,

                          service_classes=[uuid, SERIAL_PORT_CLASS],

                          profiles=[SERIAL_PORT_PROFILE],

                          #                   protocols = [ OBEX_UUID ]

                          )

        print "Waiting for connection on RFCOMM channel %d" % port

        client_sock, client_info = server_sock.accept()

        print "Accepted connection from ", client_info

        # data = str(msg.payload)

        client_sock.send(message)

        client_sock.close()

    except IOError:

        print("IOERROR")

        pass


def on_connect(client, userdata, flags, rc):
    print("rc ->", str(rc))

    print(str(flags))

    client1.subscribe("paho000011117", 0)

    thread.start_new_thread(getlocation, ())


def getlocation():
    global LAT

    global LANG

    index = 0

    print("LAT long ->", len(LAT))

    print("LAT long ->", len(LANG))

    while True:

        now = time.localtime()

        nowTime = "%04d%02d%02d%02d%02d%02d" % (
        now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min, now.tm_sec)

        if index != 52:

            client1.publish("location",
                            "paho000011117" + "," + str(LAT[index]) + "," + str(LANG[index]) + "," + nowTime)

            print("!!!!", nowTime)

            sendBlueTooth("location," + str(LAT[index]) + "," + str(LANG[index]))

            index = index + 1

        elif index == 52:

            client1.publish("location",
                            "paho000011117" + "," + str(LAT[index]) + "," + str(LANG[index]) + "," + nowTime)

            print("!!!!", nowTime)

            sendBlueTooth("location," + str(LAT[index]) + "," + str(LANG[index]))

            index = 0

        time.sleep(1)


client1 = mqtt.Client(client_id="paho000011117", clean_session=True)

client1.on_connect = on_connect

client1.on_message = on_message

client1.connect(broker, port, 60)

client1.subscribe("paho000011117", 0)

# client1.loop_start()

client1.loop_forever()